// <auto-generated />
using MGCap.DataAccess.Implementation.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MGCap.DataAccess.Implementation.Migrations.MGCapDb
{
    [DbContext(typeof(MGCapDbContext))]
    [Migration("20180625180902_RemovedCustomerIdFromBuilding")]
    partial class RemovedCustomerIdFromBuilding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MGCap.Domain.Models.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(80);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(80);

                    b.Property<string>("City")
                        .HasMaxLength(80);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(3);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("State")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(32);

                    b.HasKey("ID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MGCap.Domain.Models.Building", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<bool>("IsActive");

                    b.Property<int>("IsAvailable")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("CASE WHEN [OperationsManagerId] IS NOT NULL AND [IsActive] = 1 THEN 1 ELSE 0 END");

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("OperationsManagerId");

                    b.Property<int?>("SupervisorId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OperationsManagerId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("MGCap.Domain.Models.BuildingContact", b =>
                {
                    b.Property<int>("ContactId");

                    b.Property<int>("BuildingId");

                    b.Property<bool>("Default");

                    b.Property<string>("Type")
                        .HasMaxLength(80);

                    b.HasKey("ContactId", "BuildingId");

                    b.HasAlternateKey("BuildingId", "ContactId");

                    b.ToTable("BuildingContacts");
                });

            modelBuilder.Entity("MGCap.Domain.Models.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("FranchiseId");

                    b.Property<string>("Name")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("FranchiseId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("MGCap.Domain.Models.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(80);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("Gender")
                        .HasMaxLength(1);

                    b.Property<Guid>("Guid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(80);

                    b.Property<string>("Notes");

                    b.Property<string>("Salutation")
                        .HasMaxLength(80);

                    b.Property<string>("Title")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("MGCap.Domain.Models.ContactAddress", b =>
                {
                    b.Property<int>("AddressId");

                    b.Property<int>("ContactId");

                    b.Property<bool>("Default");

                    b.Property<string>("Name");

                    b.Property<string>("Type")
                        .HasMaxLength(80);

                    b.HasKey("AddressId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactAddresses");
                });

            modelBuilder.Entity("MGCap.Domain.Models.ContactEmail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContactId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Default");

                    b.Property<string>("Email")
                        .HasMaxLength(128);

                    b.Property<string>("Type")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactEmails");
                });

            modelBuilder.Entity("MGCap.Domain.Models.ContactPhone", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContactId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Default");

                    b.Property<string>("Ext")
                        .HasMaxLength(13);

                    b.Property<string>("Phone")
                        .HasMaxLength(13);

                    b.Property<string>("Type")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactPhones");
                });

            modelBuilder.Entity("MGCap.Domain.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CRHoldFlag");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<double>("CreditLimit");

                    b.Property<string>("CreditTerms");

                    b.Property<bool>("FinanceCharges");

                    b.Property<bool>("FixedMarkupRate");

                    b.Property<int>("GracePeriodInDays");

                    b.Property<Guid>("Guid");

                    b.Property<bool>("InformSalesRepMinMargin");

                    b.Property<double?>("InsuredUpTo");

                    b.Property<string>("InsurerName");

                    b.Property<bool>("IsGenericAccount");

                    b.Property<double>("MinimumProfitMargin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("Notes");

                    b.Property<bool>("PONumberRequired");

                    b.Property<string>("PricingColumn")
                        .HasMaxLength(1);

                    b.Property<string>("PricingMethod")
                        .HasMaxLength(1);

                    b.Property<int>("PricingRow");

                    b.Property<bool>("ShowPricesOnShipper");

                    b.Property<int>("StatusId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MGCap.Domain.Models.CustomerAddress", b =>
                {
                    b.Property<int>("AddressId");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("Default");

                    b.Property<string>("Name")
                        .HasMaxLength(80);

                    b.Property<string>("Type")
                        .HasMaxLength(80);

                    b.HasKey("AddressId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("MGCap.Domain.Models.CustomerCertificate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerCertificates");
                });

            modelBuilder.Entity("MGCap.Domain.Models.CustomerContact", b =>
                {
                    b.Property<int>("ContactId");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("Default");

                    b.Property<bool>("SelectedForMarketing");

                    b.Property<string>("Type")
                        .HasMaxLength(80);

                    b.HasKey("ContactId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerContacts");
                });

            modelBuilder.Entity("MGCap.Domain.Models.CustomerCustomerGroup", b =>
                {
                    b.Property<int>("CustomerId");

                    b.Property<int>("CustomerGroupId");

                    b.HasKey("CustomerId", "CustomerGroupId");

                    b.HasAlternateKey("CustomerGroupId", "CustomerId");

                    b.ToTable("CustomerCustomerGroups");
                });

            modelBuilder.Entity("MGCap.Domain.Models.CustomerEmployee", b =>
                {
                    b.Property<int>("EmployeeId");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Type")
                        .HasMaxLength(128);

                    b.HasKey("EmployeeId", "CustomerId");

                    b.HasAlternateKey("CustomerId", "EmployeeId");

                    b.ToTable("CustomerEmployees");
                });

            modelBuilder.Entity("MGCap.Domain.Models.CustomerGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.ToTable("CustomerGroups");
                });

            modelBuilder.Entity("MGCap.Domain.Models.CustomerPhone", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("Default");

                    b.Property<string>("Ext")
                        .HasMaxLength(13);

                    b.Property<string>("Phone")
                        .HasMaxLength(13);

                    b.Property<string>("Type")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPhones");
                });

            modelBuilder.Entity("MGCap.Domain.Models.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("MGCap.Domain.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(10);

                    b.Property<int>("CompanyId");

                    b.Property<int>("ContactId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("EmployeeStatusId");

                    b.Property<Guid>("Guid");

                    b.Property<int?>("RoleId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("MGCap.Domain.Models.EmployeePermission", b =>
                {
                    b.Property<int>("EmployeeId");

                    b.Property<int>("PermissionId");

                    b.HasKey("EmployeeId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("EmployeePermissions");
                });

            modelBuilder.Entity("MGCap.Domain.Models.Franchise", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("Franchises");
                });

            modelBuilder.Entity("MGCap.Domain.Models.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("MGCap.Domain.Models.PermissionRole", b =>
                {
                    b.Property<int>("PermissionId");

                    b.Property<int>("RoleId");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("PermissionRoles");
                });

            modelBuilder.Entity("MGCap.Domain.Models.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MGCap.Domain.Models.Service", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<double>("MinPrice");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("UnitFactor")
                        .HasMaxLength(10);

                    b.Property<double>("UnitPrice");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("MGCap.Domain.Models.Vendor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(128);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<double>("CreditLimit");

                    b.Property<string>("DefaultGLAccountNumber1")
                        .HasMaxLength(10);

                    b.Property<string>("DefaultGLAccountNumber2")
                        .HasMaxLength(10);

                    b.Property<string>("FEIN")
                        .HasMaxLength(80);

                    b.Property<Guid>("Guid");

                    b.Property<bool>("Is1099");

                    b.Property<bool>("IsPerson");

                    b.Property<bool>("IsSensitiveAccount");

                    b.Property<int>("LeadTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("Notes");

                    b.Property<string>("SSN")
                        .HasMaxLength(9);

                    b.Property<int>("StatusId");

                    b.Property<string>("TermsDaysOrProx")
                        .HasMaxLength(1);

                    b.Property<int>("TermsDiscDays");

                    b.Property<double>("TermsDiscPercent");

                    b.Property<int>("TermsNet");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("VendorTypeId");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("MGCap.Domain.Models.VendorAddress", b =>
                {
                    b.Property<int>("AddressId");

                    b.Property<int>("VendorId");

                    b.Property<bool>("Default");

                    b.Property<string>("Name")
                        .HasMaxLength(80);

                    b.Property<string>("Type")
                        .HasMaxLength(80);

                    b.HasKey("AddressId", "VendorId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorAddresses");
                });

            modelBuilder.Entity("MGCap.Domain.Models.VendorContact", b =>
                {
                    b.Property<int>("ContactId");

                    b.Property<int>("VendorId");

                    b.Property<bool>("Default");

                    b.Property<string>("Type")
                        .HasMaxLength(80);

                    b.HasKey("ContactId", "VendorId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorContacts");
                });

            modelBuilder.Entity("MGCap.Domain.Models.VendorEmail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Default");

                    b.Property<string>("Email")
                        .HasMaxLength(128);

                    b.Property<string>("Type")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("VendorId");

                    b.HasKey("ID");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorEmails");
                });

            modelBuilder.Entity("MGCap.Domain.Models.VendorGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.ToTable("VendorGroups");
                });

            modelBuilder.Entity("MGCap.Domain.Models.VendorPhone", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Default");

                    b.Property<string>("Ext")
                        .HasMaxLength(13);

                    b.Property<string>("Phone")
                        .HasMaxLength(13);

                    b.Property<string>("Type")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("VendorId");

                    b.HasKey("ID");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorPhones");
                });

            modelBuilder.Entity("MGCap.Domain.Models.VendorVendorGroup", b =>
                {
                    b.Property<int>("VendorId");

                    b.Property<int>("VendorGroupId");

                    b.HasKey("VendorId", "VendorGroupId");

                    b.HasAlternateKey("VendorGroupId", "VendorId");

                    b.ToTable("VendorVendorGroups");
                });

            modelBuilder.Entity("MGCap.Domain.Models.WorkOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdministratorId");

                    b.Property<int?>("AssignedEmployeeId");

                    b.Property<int?>("BuildingId");

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("CustomerContactId");

                    b.Property<string>("Description");

                    b.Property<DateTime>("DueDate");

                    b.Property<Guid>("Guid");

                    b.Property<int>("IsExpired")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("CASE WHEN [DueDate] <> '0001-01-01 00:00:00.0000000' AND [DueDate] < GETDATE() THEN 1 ELSE 0 END");

                    b.Property<string>("Location")
                        .HasMaxLength(128);

                    b.Property<int>("Number");

                    b.Property<int>("Priority");

                    b.Property<int?>("RequesterId");

                    b.Property<bool>("SendCustomerNotifications");

                    b.Property<bool>("SendRequesterNotifications");

                    b.Property<int>("StatusId");

                    b.Property<int>("Type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int?>("WorkOrderSourceId");

                    b.HasKey("ID");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("AssignedEmployeeId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerContactId");

                    b.HasIndex("RequesterId");

                    b.HasIndex("WorkOrderSourceId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("MGCap.Domain.Models.WorkOrderNote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("Note");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("WorkOrderId");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderNotes");
                });

            modelBuilder.Entity("MGCap.Domain.Models.WorkOrderSource", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("WorkOrderSources");
                });

            modelBuilder.Entity("MGCap.Domain.Models.WorkOrderStatusLogEntry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("StatusId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("WorkOrderId");

                    b.HasKey("ID");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderStatusLog");
                });

            modelBuilder.Entity("MGCap.Domain.Models.WorkOrderTask", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<double>("DiscountPercentage");

                    b.Property<bool>("IsComplete");

                    b.Property<double>("Quantity");

                    b.Property<int?>("ServiceId");

                    b.Property<double>("UnitPrice");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(80);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("WorkOrderId");

                    b.HasKey("ID");

                    b.HasIndex("ServiceId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderTasks");
                });

            modelBuilder.Entity("MGCap.Domain.Models.Building", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Employee", "OperationsManager")
                        .WithMany()
                        .HasForeignKey("OperationsManagerId");

                    b.HasOne("MGCap.Domain.Models.Employee", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId");
                });

            modelBuilder.Entity("MGCap.Domain.Models.BuildingContact", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Building", "Building")
                        .WithMany("Contacts")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.Company", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Franchise", "Franchise")
                        .WithMany()
                        .HasForeignKey("FranchiseId");
                });

            modelBuilder.Entity("MGCap.Domain.Models.Contact", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.ContactAddress", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Contact", "Contact")
                        .WithMany("Addresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.ContactEmail", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Contact", "Contact")
                        .WithMany("Emails")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.ContactPhone", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Contact")
                        .WithMany("Phones")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.Customer", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.CustomerAddress", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.CustomerCertificate", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Customer")
                        .WithMany("Certificates")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.CustomerContact", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Customer", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.CustomerCustomerGroup", b =>
                {
                    b.HasOne("MGCap.Domain.Models.CustomerGroup", "CustomerGroup")
                        .WithMany()
                        .HasForeignKey("CustomerGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Customer", "Customer")
                        .WithMany("Groups")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.CustomerEmployee", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Customer", "Customer")
                        .WithMany("Employees")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.CustomerGroup", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.CustomerPhone", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Customer")
                        .WithMany("Phones")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.Department", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.Employee", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("MGCap.Domain.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("MGCap.Domain.Models.EmployeePermission", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.PermissionRole", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.Service", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.Vendor", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.VendorAddress", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Vendor", "Vendor")
                        .WithMany("Addresses")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.VendorContact", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Vendor", "Vendor")
                        .WithMany("Contacts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.VendorEmail", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Vendor", "Vendor")
                        .WithMany("Emails")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.VendorGroup", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.VendorPhone", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Vendor")
                        .WithMany("Phones")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.VendorVendorGroup", b =>
                {
                    b.HasOne("MGCap.Domain.Models.VendorGroup", "VendorGroup")
                        .WithMany()
                        .HasForeignKey("VendorGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Vendor", "Vendor")
                        .WithMany("Groups")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.WorkOrder", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Employee", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorId");

                    b.HasOne("MGCap.Domain.Models.Employee", "AssignedEmployee")
                        .WithMany()
                        .HasForeignKey("AssignedEmployeeId");

                    b.HasOne("MGCap.Domain.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId");

                    b.HasOne("MGCap.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.Contact", "CustomerContact")
                        .WithMany()
                        .HasForeignKey("CustomerContactId");

                    b.HasOne("MGCap.Domain.Models.Contact", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId");

                    b.HasOne("MGCap.Domain.Models.WorkOrderSource", "WorkOrderSource")
                        .WithMany()
                        .HasForeignKey("WorkOrderSourceId");
                });

            modelBuilder.Entity("MGCap.Domain.Models.WorkOrderNote", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MGCap.Domain.Models.WorkOrder", "WorkOrder")
                        .WithMany("Notes")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.WorkOrderStatusLogEntry", b =>
                {
                    b.HasOne("MGCap.Domain.Models.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MGCap.Domain.Models.WorkOrderTask", b =>
                {
                    b.HasOne("MGCap.Domain.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("MGCap.Domain.Models.WorkOrder", "WorkOrder")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
